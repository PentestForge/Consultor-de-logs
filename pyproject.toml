[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "consultor-logs"
version = "1.0.0"
description = "Windows Security Log Analyzer and Anomaly Detection System"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Security Team", email = "security@pentestforge.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security",
    "Topic :: System :: Logging",
    "Topic :: System :: Systems Administration",
]
keywords = ["security", "logs", "windows", "anomaly-detection", "forensics"]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "pandas>=1.5.0",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
    "jinja2>=3.0.0",
    "plotly>=5.0.0",
    "pyyaml>=6.0",
    "python-dateutil>=2.8.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pywin32>=306; sys_platform == 'win32'",
    "wmi>=1.5.1; sys_platform == 'win32'",
    "reportlab>=4.0.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
]
web = [
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "gunicorn>=21.0.0",
]

[project.urls]
Homepage = "https://github.com/PentestForge/Consultor-de-logs"
Repository = "https://github.com/PentestForge/Consultor-de-logs"
Issues = "https://github.com/PentestForge/Consultor-de-logs/issues"

[project.scripts]
consultor-logs = "consultor_logs.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
consultor_logs = ["templates/*.html", "templates/*.j2", "config/*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]